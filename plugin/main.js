/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianToBookstackPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var logMessages = {
  ["remote" /* push */]: "Pushing missing files to Bookstack",
  ["local" /* pull */]: "Pulling files from Bookstack",
  ["update --remote" /* updateRemote */]: "Updating remote files",
  ["update --local" /* updateLocal */]: "Updating local files"
};
var DEFAULT_SETTINGS = {
  configPath: "~/.config/obsidian_to_bookstack/conf.toml",
  envPath: ""
};
var ObsidianToBookstackPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const pluginPath = this.app.vault.adapter.basePath;
    process.chdir(pluginPath);
    this.checkIfDoppler();
    this.addRibbonIcon("book", "Bookstack", (event) => {
      const menu = new import_obsidian.Menu();
      menu.addItem(
        (item) => item.setTitle("Push to Bookstack").setIcon("book-up").onClick(
          () => this.runBookstackCommands([
            "remote" /* push */,
            "update --remote" /* updateRemote */
          ])
        )
      );
      menu.addItem(
        (item) => item.setTitle("Pull from Bookstack").setIcon("book-down").onClick(
          () => this.runBookstackCommands([
            "local" /* pull */,
            "update --local" /* updateLocal */
          ])
        )
      );
      menu.showAtMouseEvent(event);
    });
    this.addSettingTab(
      new ObsidianToBookstackPluginSettingTab(this.app, this)
    );
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  checkIfDoppler() {
    const command = "doppler --version";
    (0, import_child_process.exec)(command, (error, stdout, stderr) => {
      if (error || stderr) {
        new import_obsidian.Notice(`Doppler not installed or not properly set.`);
        this.doppler = false;
        return;
      } else {
        this.doppler = true;
      }
    });
  }
  buildBaseCommand() {
    let command = "obsidian_to_bookstack";
    if (this.settings.configPath) {
      command = `${command} --config ${this.settings.configPath}`;
    }
    if (this.settings.envPath) {
      command = `${command} --env ${this.settings.envPath}`;
    }
    if (this.doppler) {
      command = "doppler run -- " + command;
    }
    return command;
  }
  runBookstackCommands(args) {
    args.forEach((arg) => {
      let command = this.buildBaseCommand();
      command = `${command} ${arg}`;
      console.log(command);
      (0, import_child_process.exec)(command, (error, stdout, stderr) => {
        if (error || stderr) {
          new import_obsidian.Notice(`Error with command, check console for error.`);
          console.log(`${error}`);
          return;
        }
        new import_obsidian.Notice(logMessages[arg]);
      });
    });
  }
};
var ObsidianToBookstackPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Configuration File Path").setDesc(
      "Configuration file to load for use with `obsidian-to-bookstack`"
    ).addText(
      (text) => text.setPlaceholder("Enter the path to your config.").setValue(this.plugin.settings.configPath).onChange(async (value) => {
        this.plugin.settings.configPath = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Env File Path").setDesc("Env file to load for use with `obsidian-to-bookstack`").addText(
      (text) => text.setPlaceholder("Enter the path to your env file.").setValue(this.plugin.settings.envPath).onChange(async (value) => {
        this.plugin.settings.envPath = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
